public void paintComponent(Graphics g) {
    super.paintComponent(g);
    draw(g);
}

public void draw(Graphics g) {
    if (running) {
        drawBoard(g);
        drawApple(g);
        drawSnake(g);
        drawScore(g);
    }

    if (paused) {
        drawPausedText(g);
    } else if (!running) {
        gameOver(g);
        isGameOver();
    }
}

public void drawBoard(Graphics g) {
    /*
    for (int i = 0; i < SCREEN_HEIGHT/UNIT_SIZE; i++) {
        g.drawLine(i*UNIT_SIZE, 0, i*UNIT_SIZE, SCREEN_HEIGHT);
        g.drawLine(0, i*UNIT_SIZE, SCREEN_WIDTH, i*UNIT_SIZE);
    }
    */
}

public void drawApple(Graphics g) {
    g.setColor(Color.red);
    g.fillOval(appleX, appleY, UNIT_SIZE, UNIT_SIZE);
}

public void drawSnake(Graphics g) {
    for (int i = 0; i < bodyParts; i++) {
        if (i == 0) {
            g.setColor(Color.GREEN);
        } else {
            g.setColor(new Color(45, 180, 0));
        }
        g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
    }
}

public void drawScore(Graphics g) {
    g.setColor(Color.RED);
    g.setFont(new Font("Ink Free", Font.BOLD, 40));
    FontMetrics metricsScore = getFontMetrics(g.getFont());
    g.drawString("Puntuación: " + applesEaten, (SCREEN_WIDTH - metricsScore.stringWidth("Puntuación: " + applesEaten)) / 2, g.getFont().getSize());
}

public void drawPausedText(Graphics g) {
    g.setColor(Color.RED);
    g.setFont(new Font("Ink Free", Font.BOLD, 50));
    FontMetrics metricsPause = getFontMetrics(g.getFont());
    g.drawString("PAUSADO", (SCREEN_WIDTH - metricsPause.stringWidth("PAUSADO")) / 2, SCREEN_HEIGHT / 2);
}
